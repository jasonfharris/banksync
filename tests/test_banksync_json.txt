# --------------------------------------------------------------------------------------------------------------------------
# Test banksync functionality with config file
# --------------------------------------------------------------------------------------------------------------------------

>>> import sys, os, time
>>> from sysexecute import *
>>> sys.path.append(os.path.abspath('.'))
>>> sys.path.append(os.path.abspath('..'))
>>> from banksync import *

>>> set_defaults('verbosity', 2)
>>> set_defaults('captureStdOutStdErr', True)
>>> def currentHash(repo):
...     return execute4('git rev-parse HEAD', cwd=repo)[1].strip()


# Creating Repos

>>> ans = execute4('rm -rf repoFish repoBird repoSyncFile')

>>> ans = execute4('mkdir repoFish')
>>> ans = execute4('git init', cwd='repoFish')
>>> ans = execute4('git remote add origin https://github.com/testbank/repoFish.git', cwd='repoFish')

>>> ans = execute4('mkdir repoBird')
>>> ans = execute4('git init', cwd='repoBird')
>>> ans = execute4('git remote add origin https://github.com/testbank/repoBird.git', cwd='repoBird')

>>> ans = execute4('mkdir repoSyncFile')
>>> ans = execute4('git init', cwd='repoSyncFile')
>>> ans = execute4('echo "[General]\ncwd=..\nsyncFile=syncfile.json" > repoSyncFile/bankconfig.ini')
>>> ans = execute4('git remote add origin https://github.com/testbank/animalsRepoSync.git', cwd='repoSyncFile')


# Filling Repos Sync Point 1

>>> ans = execute4('echo "trout" >> Fish.txt', cwd='repoFish')
>>> ans = execute4('git add Fish.txt', cwd='repoFish')
>>> ans = execute4('git commit -am "committing trout"', cwd='repoFish')
>>> troutHash = currentHash('repoFish')

>>> ans = execute4('echo "sparrow" >> Bird.txt', cwd='repoBird')
>>> ans = execute4('git add Bird.txt', cwd='repoBird')
>>> ans = execute4('git commit -am "committing sparrow"', cwd='repoBird')
>>> sparrowHash = currentHash('repoBird')

>>> ans = execute4('../banksync/banksync.py createSyncfile repoFish repoBird', cwd='repoSyncFile')
>>> ans = execute4('git add syncfile.json bankconfig.ini', cwd='repoSyncFile')
>>> ans = execute4('git commit -am "syncPoint1"', cwd='repoSyncFile')
>>> syncPoint1 = currentHash('repoSyncFile')
>>> time.sleep(4)

# Filling Repos Sync Point 2

>>> ans = execute4('echo "snapper" >> Fish.txt', cwd='repoFish')
>>> ans = execute4('git add Fish.txt', cwd='repoFish')
>>> ans = execute4('git commit -am "committing snapper"', cwd='repoFish')
>>> snapperHash = currentHash('repoFish')

>>> ans = execute4('echo "hawk" >> Bird.txt', cwd='repoBird')
>>> ans = execute4('git add Bird.txt', cwd='repoBird')
>>> ans = execute4('git commit -am "committing hawk"', cwd='repoBird')
>>> hawkHash = currentHash('repoBird')

>>> ans = execute4('../banksync/banksync.py recordRepos', cwd='repoSyncFile')
>>> ans = execute4('git add syncfile.json bankconfig.ini', cwd='repoSyncFile')
>>> ans = execute4('git commit -am "syncPoint2"', cwd='repoSyncFile')
>>> syncPoint2 = currentHash('repoSyncFile')
>>> time.sleep(4)

# Filling Repos Sync Point 3

>>> ans = execute4('echo "salmon" >> Fish.txt', cwd='repoFish')
>>> ans = execute4('git add Fish.txt', cwd='repoFish')
>>> ans = execute4('git commit -am "committing salmon"', cwd='repoFish')
>>> salmonHash = currentHash('repoFish')

>>> ans = execute4('echo "eagle" >> Bird.txt', cwd='repoBird')
>>> ans = execute4('git add Bird.txt', cwd='repoBird')
>>> ans = execute4('git commit -am "committing eagle"', cwd='repoBird')
>>> eagleHash = currentHash('repoBird')

>>> ans = execute4('../banksync/banksync.py recordRepos', cwd='repoSyncFile')
>>> ans = execute4('git add syncfile.json bankconfig.ini', cwd='repoSyncFile')
>>> ans = execute4('git commit -am "syncPoint3"', cwd='repoSyncFile')
>>> syncPoint3 = currentHash('repoSyncFile')

>>> troutHash != snapperHash != salmonHash != sparrowHash != hawkHash != eagleHash
True


# Test roll back

>>> ans = execute4('git checkout {syncPoint1}', cwd='repoSyncFile')
>>> ans = execute4('../banksync/banksync.py sync', cwd='repoSyncFile')
>>> troutHash == currentHash('repoFish')
True
>>> sparrowHash == currentHash('repoBird')
True

>>> ans = execute4('git checkout {syncPoint2}', cwd='repoSyncFile')
>>> ans = execute4('../banksync/banksync.py sync', cwd='repoSyncFile')
>>> snapperHash == currentHash('repoFish')
True
>>> hawkHash == currentHash('repoBird')
True

>>> ans = execute4('git checkout master', cwd='repoSyncFile')
>>> ans = execute4('../banksync/banksync.py sync', cwd='repoSyncFile')
>>> salmonHash == currentHash('repoFish')
True
>>> eagleHash == currentHash('repoBird')
True


# Test createSyncrepo

>>> ans = execute4('rm -rf zoosyncrepo')

>>> ans = execute4('git checkout {syncPoint1}', cwd='repoSyncFile')
>>> ans = execute4('../banksync/banksync.py sync', cwd='repoSyncFile')
>>> ans = execute4('banksync/banksync.py createSyncrepo --syncreponame zoosyncrepo --syncfilename joekeeper.json repoFish repoBird')
>>> ans = execute4('git add joekeeper.json', cwd='zoosyncrepo')
>>> ans = execute4('git commit -am "inital"', cwd='zoosyncrepo')
>>> zooInitial = currentHash('zoosyncrepo')

>>> ans = execute4('../banksync/banksync.py git checkout master', cwd='zoosyncrepo')
>>> ans = execute4('../banksync/banksync.py recordRepos', cwd='zoosyncrepo')
>>> ans = execute4('git commit -am "final"', cwd='zoosyncrepo')
>>> zooFinal = currentHash('zoosyncrepo')

>>> ans = execute4('git checkout {zooInitial}', cwd='zoosyncrepo')
>>> ans = execute4('../banksync/banksync.py sync', cwd='zoosyncrepo')
>>> troutHash == currentHash('repoFish')
True
>>> sparrowHash == currentHash('repoBird')
True

>>> ans = execute4('git checkout {zooFinal}', cwd='zoosyncrepo')
>>> ans = execute4('../banksync/banksync.py sync', cwd='zoosyncrepo')
>>> salmonHash == currentHash('repoFish')
True
>>> eagleHash == currentHash('repoBird')
True


# Test bisect

>>> ans = execute4('../banksync/banksync.py gitall checkout master', cwd='repoSyncFile')
>>> ans = execute4('../banksync/banksync.py bisect start', cwd='repoSyncFile')
>>> ans = execute4('../banksync/banksync.py bisect good {syncPoint1}', cwd='repoSyncFile')
>>> ans = execute4('../banksync/banksync.py bisect bad {syncPoint3}', cwd='repoSyncFile')
>>> syncPoint2 == currentHash('repoSyncFile')
True
>>> ans = execute4('../banksync/banksync.py bisect good {syncPoint2}', cwd='repoSyncFile')
>>> bool(re.search(syncPoint3.strip() + ' is the first bad commit', ans[1]))
True
>>> snapperHash == currentHash('repoFish')
True
>>> hawkHash == currentHash('repoBird')
True
>>> ans = execute4('../banksync/banksync.py bisect reset', cwd='repoSyncFile')
>>> syncPoint3 == currentHash('repoSyncFile')
True
>>> salmonHash == currentHash('repoFish')
True
>>> eagleHash == currentHash('repoBird')
True

# Test sync with timestamps

update client repos to master, and sync repo to syncPoint1
>>> ans = execute4('git checkout master', cwd='repoSyncFile')
>>> ans = execute4('../banksync/banksync.py sync', cwd='repoSyncFile')
>>> ans = execute4('git checkout {syncPoint1}', cwd='repoSyncFile')

remove hashes from syncfile.json
>>> dict = loadSyncFileAsDict('repoSyncFile/syncfile.json')
>>> del dict['repoFish']['sha']
>>> del dict['repoBird']['sha']
>>> writeDictToSyncFile('repoSyncFile/syncfile.json', dict)

verify that sync now correctly updates to the timestamps
>>> ans = execute4('../banksync/banksync.py sync', cwd='repoSyncFile')
>>> troutHash == currentHash('repoFish')
True
>>> sparrowHash == currentHash('repoBird')
True

checkout syncPoint2
>>> ans = execute4('git reset --hard', cwd='repoSyncFile')
>>> ans = execute4('git checkout {syncPoint2}', cwd='repoSyncFile')

remove hashes from syncfile.json and alter the UnixTimeStamps
>>> dict = loadSyncFileAsDict('repoSyncFile/syncfile.json')
>>> del dict['repoFish']['sha']
>>> del dict['repoBird']['sha']
>>> dict['repoFish']['UnixTimeStamp'] = str(int(dict['repoFish']['UnixTimeStamp'])+1)
>>> dict['repoBird']['UnixTimeStamp'] = str(int(dict['repoBird']['UnixTimeStamp'])+1)
>>> writeDictToSyncFile('repoSyncFile/syncfile.json', dict)

confirm that we get no update unless if we allow only exact timestamps
>>> ans = execute4('../banksync/banksync.py sync --matching timestamp', ignoreErrors=True, cwd='repoSyncFile')
>>> bool(re.search('failure! not all repos checked out to the specified sync state.', ans[1]))
True

>>> troutHash == currentHash('repoFish')
True
>>> sparrowHash == currentHash('repoBird')
True

confirm that we get the correct update if we allow close timestamps
>>> ans = execute4('../banksync/banksync.py sync --matching closetimestamp', cwd='repoSyncFile')
>>> snapperHash == currentHash('repoFish')
True
>>> hawkHash == currentHash('repoBird')
True


# Do bank git checkout master

>>> ans = execute4('git checkout {syncPoint1} --force', cwd='repoSyncFile')
>>> ans = execute4('../banksync/banksync.py sync', cwd='repoSyncFile')
>>> troutHash == currentHash('repoFish')
True
>>> sparrowHash == currentHash('repoBird')
True
>>> ans = execute4('../banksync/banksync.py git checkout master', cwd='repoSyncFile')
>>> salmonHash == currentHash('repoFish')
True
>>> eagleHash == currentHash('repoBird')
True
>>> syncPoint1 == currentHash('repoSyncFile')
True
>>> ans = execute4('../banksync/banksync.py gitall checkout master', cwd='repoSyncFile')
>>> syncPoint3 == currentHash('repoSyncFile')
True

